Step 1: Requirements clarifications
 - ask questions to find the exact scope of the problem
    Will users of our service be able to post tweets and follow other people?
    Should we also design to create and display user’s timeline?
    Will tweets contain photos and videos?
    Are we focusing on backend only or are we developing front-end too?
    Will users be able to search tweets?
    Do we need to display hot trending topics?
    Would there be any push notification for new (or important) tweets?

Step 2: System interface definition
 - define what APIs are expected from the system.
    PostTweet(user_id, tweet_data, tweet_location, user_location, timestamp, …)

Step 3: Back-of-the-envelope estimation
 - what scale is expected from the system (e.g., number of new tweets, number of tweet views, how many timeline generations per sec., etc.)?
 - how much storage would we need? We’ll have different numbers if users can have photos and videos in their tweets.
 - what network bandwidth usage are we expecting? This would be crucial in deciding how would we manage traffic and balance load between servers.

Step 4: Defining data model
 - User: UserID, Name, Email, DoB, CreationData, LastLogin, etc.
 - Tweet: TweetID, Content, TweetLocation, NumberOfLikes, TimeStamp, etc.
 - UserFollowos: UserdID1, UserID2
 - FavoriteTweets: UserID, TweetID, TimeStamp

Step 5: High-level design
 - diagram with 5-6 boxes representing core components of your system. You should identify enough components that are needed to solve the actual problem from end-to-end.

Step 6: Detailed design
 - Since we’ll be storing a huge amount of data, how should we partition our data to distribute it to multiple databases?
 -  Should we try to store all the data of a user on the same database? What issue can it cause?
 - How would we handle hot users, who tweet a lot or follow lots of people?
 - Since user’s timeline will contain most recent (and relevant) tweets, should we try to store our data in such a way that is optimized to scan latest tweets?
 - How much and at which layer should we introduce cache to speed things up?
 - What components need better load balancing?

Step 7: Identifying and resolving bottlenecks
 - Is there any single point of failure in our system? What are we doing to mitigate it?
 - Do we’ve enough replicas of the data so that if we lose a few servers, we can still serve our users?
 - Similarly, do we’ve enough copies of different services running, such that a few failures will not cause total system shutdown?
 - How are we monitoring the performance of our service? Do we get alerts whenever critical components fail or their performance degrade?
